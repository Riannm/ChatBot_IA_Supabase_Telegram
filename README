# üöó Bot Autoescola

Um bot inteligente multicanal para autoescolas que atende clientes via WhatsApp e Telegram, utilizando IA para fornecer informa√ß√µes sobre cursos, pre√ßos, documenta√ß√£o e agendamentos.

## üåü Funcionalidades

### ü§ñ IA Conversacional
- **Atendimento automatizado** com modelos de linguagem avan√ßados
- **Respostas contextuais** sobre servi√ßos da autoescola
- **M√∫ltiplos provedores de IA**: OpenRouter, Groq
- **Busca inteligente** com integra√ß√£o Tavily

### üì± Canais de Atendimento
- **WhatsApp Business**: Atendimento via whatsapp-web.js
- **Telegram**: Bot nativo com comandos e respostas autom√°ticas
- **QR Code no terminal** para f√°cil configura√ß√£o do WhatsApp

### üíæ Banco de Dados
- **Supabase** para armazenamento de conversas e dados
- **Hist√≥rico de conversas** para cada cliente
- **Analytics** de atendimento e performance

### üîç Recursos Avan√ßados
- **Busca na web** para informa√ß√µes atualizadas
- **Respostas personalizadas** baseadas no hist√≥rico
- **Logs detalhados** para monitoramento
- **Deploy em produ√ß√£o** otimizado para VPS

## üöÄ In√≠cio R√°pido

### Pr√©-requisitos

- Node.js 20+ (recomendado)
- Conta no Supabase
- Token do Bot Telegram
- Chaves de API dos provedores de IA

### üì¶ Instala√ß√£o

1. **Clone o reposit√≥rio**
```bash
git clone https://github.com/seu-usuario/bot-autoescola.git
cd bot-autoescola
```

2. **Instale as depend√™ncias**
```bash
npm install
```

3. **Configure as vari√°veis de ambiente**
```bash
cp .env.example .env
```

### ‚öôÔ∏è Configura√ß√£o

#### Vari√°veis de Ambiente Obrigat√≥rias

```env
# Supabase
SUPABASE_URL=https://seu-projeto.supabase.co
SUPABASE_ANON_KEY=sua_chave_anonima_supabase

# Telegram
TELEGRAM_BOT_TOKEN=1234567890:ABCDEF...
TELEGRAM_CHAT_ID=seu_chat_id

# IA - OpenRouter
OPENROUTER_API_KEY=sk-or-v1-...

# Busca Web - Tavily
TAVILY_API_KEY=tvly-...

# WhatsApp/Puppeteer
PUPPETEER_SKIP_CHROMIUM_DOWNLOAD=true
```

#### Configura√ß√£o do Supabase

1. Crie um novo projeto no [Supabase](https://supabase.com)
2. Execute o SQL para criar as tabelas necess√°rias:

```sql
-- Cria√ß√£o da tabela 'mensagens'
-- https://supabase.com/dashboard/project/fcfydhdcpbgtnfkujgxc/editor/18475?schema=public
CREATE TABLE mensagens (
    id BIGSERIAL PRIMARY KEY,
    user_texto TEXT NOT NULL,
    mensagem TEXT NOT NULL,
    tempo TIMESTAMP WITH TIME ZONE NOT NULL,
    tipo_mensagem TEXT DEFAULT 'recebida' CHECK (tipo_mensagem IN ('recebida', 'enviada')),
    nome_contato TEXT,
    -- Novas colunas adicionadas
    intencao TEXT,
    escalada_humano BOOLEAN DEFAULT FALSE,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Cria√ß√£o de √≠ndices para otimiza√ß√£o de performance
CREATE INDEX idx_mensagens_user_texto ON mensagens(user_texto);
CREATE INDEX idx_mensagens_tempo ON mensagens(tempo DESC);
CREATE INDEX idx_mensagens_tipo ON mensagens(tipo_mensagem);
CREATE INDEX idx_mensagens_intencao ON mensagens(intencao); -- √çndice para a nova coluna 'intencao'
CREATE INDEX idx_mensagens_escalada_humano ON mensagens(escalada_humano); -- √çndice para a nova coluna 'escalada_humano'

-- Coment√°rios para documenta√ß√£o (opcional, mas boa pr√°tica)
COMMENT ON TABLE mensagens IS 'Armazena todas as mensagens do chatbot (enviadas e recebidas)';
COMMENT ON COLUMN mensagens.id IS 'Identificador √∫nico da mensagem';
COMMENT ON COLUMN mensagens.user_texto IS 'ID √∫nico do usu√°rio do WhatsApp (n√∫mero de telefone)';
COMMENT ON COLUMN mensagens.mensagem IS 'Conte√∫do da mensagem';
COMMENT ON COLUMN mensagens.tempo IS 'Timestamp da mensagem, refletindo o momento de envio/recebimento';
COMMENT ON COLUMN mensagens.tipo_mensagem IS 'Tipo de mensagem: "recebida" (do cliente) ou "enviada" (do bot)';
COMMENT ON COLUMN mensagens.nome_contato IS 'Nome do contato do WhatsApp, se dispon√≠vel';
COMMENT ON COLUMN mensagens.intencao IS 'Inten√ß√£o ou t√≥pico da mensagem identificada pelo bot (ex: PRECOS, AGENDAMENTO, IA_GERAL)';
COMMENT ON COLUMN mensagens.escalada_humano IS 'Indica se a conversa foi escalada para atendimento humano (TRUE/FALSE)';
COMMENT ON COLUMN mensagens.created_at IS 'Timestamp de quando o registro foi criado no banco de dados';

-- (Opcional) Fun√ß√£o RPC para 'get_first_interaction_times'
-- Se voc√™ quiser usar a mesma l√≥gica de relat√≥rio de novos/recorrentes usu√°rios,
-- voc√™ tamb√©m precisar√° criar esta fun√ß√£o no novo banco de dados.
CREATE OR REPLACE FUNCTION get_first_interaction_times(user_texts TEXT[])
RETURNS TABLE (user_texto TEXT, primeiro_tempo TIMESTAMPTZ) AS $$
BEGIN
    RETURN QUERY
    SELECT
        m.user_texto,
        MIN(m.tempo) AS primeiro_tempo
    FROM
        mensagens m
    WHERE
        m.user_texto = ANY(user_texts)
    GROUP BY
        m.user_texto;
END;
$$ LANGUAGE plpgsql;

-- (Opcional) Conceder permiss√µes de execu√ß√£o para a fun√ß√£o, se sua pol√≠tica RLS exigir
-- GRANT EXECUTE ON FUNCTION get_first_interaction_times(TEXT[]) TO anon;
-- GRANT EXECUTE ON FUNCTION get_first_interaction_times(TEXT[]) TO authenticated;
```

#### Configura√ß√£o do Telegram

1. Crie um bot com [@BotFather](https://t.me/botfather)
2. Use `/newbot` e siga as instru√ß√µes
3. Copie o token fornecido
4. Para obter o Chat ID:
   - Envie uma mensagem para seu bot
   - Acesse: `https://api.telegram.org/bot<TOKEN>/getUpdates`
   - Copie o `chat.id` da resposta

## üñ•Ô∏è Uso

### Desenvolvimento Local

```bash
# Iniciar em modo desenvolvimento
npm run dev

# Ou iniciar normalmente
npm start
```

### Configura√ß√£o do WhatsApp

1. Execute o bot
2. Procure pelo QR Code nos logs do terminal
3. Escaneie o QR Code com seu WhatsApp
4. O bot ficar√° conectado automaticamente

```
üì± ESCANEIE O QR CODE ABAIXO COM SEU WHATSAPP:

‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà  ‚ñà‚ñà  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà
‚ñà‚ñà          ‚ñà‚ñà      ‚ñà‚ñà          ‚ñà‚ñà
‚ñà‚ñà  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà  ‚ñà‚ñà  ‚ñà‚ñà  ‚ñà‚ñà  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà  ‚ñà‚ñà
‚ñà‚ñà  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà  ‚ñà‚ñà  ‚ñà‚ñà  ‚ñà‚ñà  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà  ‚ñà‚ñà
‚ñà‚ñà  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà  ‚ñà‚ñà      ‚ñà‚ñà  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà  ‚ñà‚ñà
‚ñà‚ñà          ‚ñà‚ñà  ‚ñà‚ñà  ‚ñà‚ñà          ‚ñà‚ñà
‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà  ‚ñà‚ñà  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà
```

### Comandos do Telegram

- `/start` - Iniciar conversa
- `/help` - Mostrar ajuda
- `/info` - Informa√ß√µes da autoescola
- `/precos` - Tabela de pre√ßos
- `/contato` - Informa√ß√µes de contato

## üìä Monitoramento

### Logs Estruturados

O bot gera logs detalhados para monitoramento:

```
‚úÖ Bot Telegram iniciado
üöÄ Bot WhatsApp da Autoescola est√° rodando!
üì® Nova mensagem de 5511999999999: Quero informa√ß√µes sobre CNH
ü§ñ Resposta enviada: Ol√°! Temos cursos para CNH A, B, C, D e E...
```

### M√©tricas Dispon√≠veis

- Total de conversas por plataforma
- Usu√°rios √∫nicos atendidos
- Tempo de resposta m√©dio
- T√≥picos mais consultados

### Adicionando Novos Recursos

1. **Novos comandos Telegram**: Edite `src/telegram/commands.js`
2. **Respostas WhatsApp**: Modifique `src/whatsapp/handlers.js`
3. **Prompts de IA**: Atualize `src/ai/prompts.js`

## üîß Solu√ß√£o de Problemas

### Problemas Comuns

#### WhatsApp n√£o conecta
```bash
# Verifique se o QR code est√° sendo gerado
npm install qrcode-terminal

# Limpe sess√µes antigas
rm -rf .wwebjs_auth/
```

#### Erro do Supabase
```bash
# Verifique as vari√°veis
echo $SUPABASE_URL
echo $SUPABASE_ANON_KEY
```

### Logs de Debug

Para logs mais detalhados:

```env
DEBUG=true
NODE_ENV=development
```

## üìà Performance

### Otimiza√ß√µes Implementadas

- **Headless WhatsApp** - Sem interface gr√°fica
- **Cache de sess√µes** - Evita reconex√µes
- **Conex√£o persistente** - Mant√©m bots online
- **Logs otimizados** - Apenas informa√ß√µes essenciais

### Recursos de Sistema

- **RAM**: ~200MB em produ√ß√£o
- **CPU**: Baixo uso, picos durante processamento IA
- **Rede**: Dependente do volume de mensagens

## ü§ù Contribui√ß√£o

1. Fa√ßa um fork do projeto
2. Crie uma branch: `git checkout -b minha-feature`
3. Commit suas mudan√ßas: `git commit -m 'Adiciona nova feature'`
4. Push para a branch: `git push origin minha-feature`
5. Abra um Pull Request

## üìù Licen√ßa

Este projeto est√° sob a licen√ßa MIT. Veja o arquivo [LICENSE](LICENSE) para mais detalhes.

## üÜò Suporte

- **Issues**: [GitHub Issues](https://github.com/seu-usuario/bot-autoescola/issues)
- **Documenta√ß√£o**: [Wiki do Projeto](https://github.com/seu-usuario/bot-autoescola/wiki)
- **Contato**: seu-email@exemplo.com

---

‚≠ê **Se este projeto foi √∫til, considere dar uma estrela no GitHub!**

**Desenvolvido com ‚ù§Ô∏è para automatizar o atendimento de autoescolas**